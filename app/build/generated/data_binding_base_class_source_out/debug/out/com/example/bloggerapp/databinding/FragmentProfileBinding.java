// Generated by view binder compiler. Do not edit!
package com.example.bloggerapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.bloggerapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentProfileBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final TextView btnLogout;

  @NonNull
  public final ImageView profileDp;

  @NonNull
  public final TextView textView3;

  @NonNull
  public final TextView uEmail;

  @NonNull
  public final TextView uName;

  @NonNull
  public final View view;

  private FragmentProfileBinding(@NonNull RelativeLayout rootView, @NonNull TextView btnLogout,
      @NonNull ImageView profileDp, @NonNull TextView textView3, @NonNull TextView uEmail,
      @NonNull TextView uName, @NonNull View view) {
    this.rootView = rootView;
    this.btnLogout = btnLogout;
    this.profileDp = profileDp;
    this.textView3 = textView3;
    this.uEmail = uEmail;
    this.uName = uName;
    this.view = view;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentProfileBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_profile, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentProfileBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_logout;
      TextView btnLogout = ViewBindings.findChildViewById(rootView, id);
      if (btnLogout == null) {
        break missingId;
      }

      id = R.id.profile_dp;
      ImageView profileDp = ViewBindings.findChildViewById(rootView, id);
      if (profileDp == null) {
        break missingId;
      }

      id = R.id.textView3;
      TextView textView3 = ViewBindings.findChildViewById(rootView, id);
      if (textView3 == null) {
        break missingId;
      }

      id = R.id.u_email;
      TextView uEmail = ViewBindings.findChildViewById(rootView, id);
      if (uEmail == null) {
        break missingId;
      }

      id = R.id.u_name;
      TextView uName = ViewBindings.findChildViewById(rootView, id);
      if (uName == null) {
        break missingId;
      }

      id = R.id.view;
      View view = ViewBindings.findChildViewById(rootView, id);
      if (view == null) {
        break missingId;
      }

      return new FragmentProfileBinding((RelativeLayout) rootView, btnLogout, profileDp, textView3,
          uEmail, uName, view);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
